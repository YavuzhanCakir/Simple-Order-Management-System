{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { LookUpService } from 'app/core/services/LookUp.service';\nimport { AuthService } from 'app/core/components/admin/login/services/auth.service';\nimport { Product } from './models/product';\nimport { ProductService } from './services/product.service';\nimport { ColorService } from '../color/services/color.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ColorDialogComponent } from '../color-dialog/color-dialog.component';\nlet ProductComponent = class ProductComponent {\n  // colorService: any;\n  constructor(productService, lookupService, alertifyService, formBuilder, authService, colorService, dialog) {\n    this.productService = productService;\n    this.lookupService = lookupService;\n    this.alertifyService = alertifyService;\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.colorService = colorService;\n    this.dialog = dialog;\n    this.displayedColumns = ['id', 'createdUserId', 'createdDate', 'lastUpdatedUserId', 'lastUpdatedDate', 'status', 'isDeleted', 'name', 'colorId', 'update', 'delete'];\n    this.product = new Product();\n    this.colors = []; // Renklerin listesi\n    this.selectedColorId = null; // Seçilen renk ID'si\n  }\n  ngAfterViewInit() {\n    this.getProductList();\n  }\n  ngOnInit() {\n    this.createProductAddForm();\n    this.loadColors(); // Renk listesini yükle\n  }\n  loadColors() {\n    this.colorService.getColorList().subscribe({\n      next: response => {\n        this.colors = response; // Gelen renk listesini ata\n        console.log('Renk Listesi:', this.colors); // Test için log\n      },\n      error: err => {\n        console.error('Hata oluştu:', err);\n      }\n    });\n  }\n  getProductList() {\n    this.productService.getProductList().subscribe(data => {\n      this.productList = data;\n      console.log(data);\n      this.dataSource = new MatTableDataSource(data);\n      this.configDataTable();\n    });\n  }\n  save() {\n    if (this.productAddForm.valid) {\n      this.product = Object.assign({}, this.productAddForm.value);\n      delete this.product.createdDate;\n      delete this.product.lastUpdatedDate;\n      if (this.product.id === 0) this.addProduct();else this.updateProduct();\n    }\n  }\n  update() {\n    if (this.productAddForm.valid) {\n      this.product = Object.assign({}, this.productAddForm.value);\n      this.updateProduct();\n    }\n  }\n  addProduct() {\n    this.productService.addProduct(this.product).subscribe(data => {\n      this.getProductList();\n      this.product = new Product();\n      jQuery('#product').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.productAddForm);\n    });\n  }\n  updateProduct() {\n    this.product.lastUpdatedUserId = this.authService.getCurrentUserId();\n    this.productService.updateProduct(this.product).subscribe(data => {\n      var index = this.productList.findIndex(x => x.id == this.product.id);\n      this.productList[index] = this.product;\n      this.dataSource = new MatTableDataSource(this.productList);\n      this.configDataTable();\n      this.product = new Product();\n      jQuery('#product').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.productAddForm);\n    });\n  }\n  createProductAddForm() {\n    this.productAddForm = this.formBuilder.group({\n      id: [0],\n      createdUserId: this.authService.getCurrentUserId(),\n      createdDate: [null],\n      lastUpdatedUserId: this.authService.getCurrentUserId(),\n      lastUpdatedDate: [null],\n      status: [true, Validators.required],\n      name: [\"\", Validators.required],\n      colorId: [0, Validators.required],\n      size: [\"\", Validators.required]\n    });\n  }\n  deleteProduct(productId) {\n    this.productService.deleteProduct(productId).subscribe(data => {\n      this.alertifyService.success(data.toString());\n      this.productList = this.productList.filter(x => x.id != productId);\n      this.dataSource = new MatTableDataSource(this.productList);\n      this.configDataTable();\n    });\n  }\n  getProductById(productId) {\n    this.clearFormGroup(this.productAddForm);\n    this.productService.getProductById(productId).subscribe(data => {\n      this.product = data;\n      console.log('Ürün Verileri:', data);\n      this.productAddForm.patchValue(data); // Tüm form değerlerini doldurur\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key)?.setErrors(null);\n      if (key === 'id') {\n        group.get(key)?.setValue(null); // ID alanını null olarak ayarlıyoruz\n      }\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  openColorDialog() {\n    const dialogRef = this.dialog.open(ColorDialogComponent, {\n      width: '400px',\n      data: {} // Gerekirse mevcut renk bilgilerini burada gönderebilirsiniz\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // Yeni eklenen/güncellenen rengi renk listesine ekleyin.\n        this.colors.push(result); // Backend'e kaydedip listeyi güncelleyebilirsiniz.\n      }\n    });\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], ProductComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], ProductComponent.prototype, \"sort\", void 0);\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.scss']\n}), __metadata(\"design:paramtypes\", [ProductService, LookUpService, AlertifyService, FormBuilder, AuthService, ColorService, MatDialog])], ProductComponent);\nexport { ProductComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}