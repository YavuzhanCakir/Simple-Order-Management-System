{"ast":null,"code":"import { ProductService } from '../product/services/product.service';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../product/services/product.service\";\nimport * as i2 from \"@angular/common\";\nfunction CardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7);\n    i0.ɵɵelement(2, \"img\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9)(4, \"h5\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 11);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 12)(9, \"p\", 13);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const productName_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(productName_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Adet: \", ctx_r2.products[i_r2].quantity, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate((ctx_r2.products[i_r2] == null ? null : ctx_r2.products[i_r2].price) || \"\\u20BA--.--\");\n  }\n}\nexport let CardComponent = /*#__PURE__*/(() => {\n  class CardComponent {\n    constructor(productService) {\n      this.productService = productService;\n      this.products = []; // LocalStorage'den alınacak ürünler burada tutulacak\n      this.productNames = [];\n      this.productIds = [];\n      this.cartItems = [{\n        id: 1,\n        name: 'T-shirt',\n        price: 29.99,\n        quantity: 2,\n        image: 'https://example.com/t-shirt.jpg'\n      }, {\n        id: 2,\n        name: 'Jeans',\n        price: 49.99,\n        quantity: 1,\n        image: 'https://example.com/jeans.jpg'\n      }, {\n        id: 3,\n        name: 'Sneakers',\n        price: 79.99,\n        quantity: 1,\n        image: 'https://example.com/sneakers.jpg'\n      }];\n    }\n    ngOnInit() {\n      this.loadProductsFromLocalStorage();\n      this.loadProductIds();\n      this.loadProductNames();\n      console.log('products', this.products);\n      const storedProducts = localStorage.getItem('cart');\n      console.log('Stored Products:', storedProducts);\n      console.log('productIdlerr', this.productIds);\n      console.log('productName', this.productNames);\n    }\n    // LocalStorage'den ürünleri yükle\n    loadProductsFromLocalStorage() {\n      const storedProducts = localStorage.getItem('cart'); // 'cart' anahtarını kullanarak localStorage'den veri alıyoruz\n      if (storedProducts) {\n        this.products = JSON.parse(storedProducts); // Veriyi JSON formatından diziye dönüştürüyoruz\n      }\n      console.log(storedProducts);\n    }\n    loadProductIds() {\n      const storedProducts = localStorage.getItem('cart');\n      if (storedProducts) {\n        const products = JSON.parse(storedProducts);\n        console.log('Tüm Ürünler:', products);\n        // Sadece geçerli (null olmayan) productId'leri filtrele\n        this.productIds = products.filter(item => item.productId !== null && item.productId !== undefined).map(item => item.productId);\n        console.log('Product IDs:', this.productIds);\n        return this.productIds; // ID'lerin listesi\n      }\n      return []; // Eğer veri yoksa boş bir dizi döndür\n    }\n    loadProductNames() {\n      // Product ID'lerine göre getProductById servisini çağır\n      const productRequests = this.productIds.map(id => this.productService.getProductById(id) // her id için servisi çağırıyoruz\n      );\n      // Tüm istekleri paralel olarak çalıştır\n      forkJoin(productRequests).subscribe(products => {\n        // Gelen ürünlerden name bilgilerini al ve productNames dizisine ekle\n        this.productNames = products.map(product => product.name);\n        console.log('Product Names:', this.productNames);\n      });\n    }\n    uniqueProducts() {\n      const unique = this.products.reduce((acc, current) => {\n        const existing = acc.find(item => item.productId === current.productId);\n        if (existing) {\n          existing.quantity += current.quantity; // Adetleri topla\n        } else {\n          acc.push(current);\n        }\n        return acc;\n      }, []);\n      return unique;\n    }\n    static #_ = this.ɵfac = function CardComponent_Factory(t) {\n      return new (t || CardComponent)(i0.ɵɵdirectiveInject(i1.ProductService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CardComponent,\n      selectors: [[\"app-card\"]],\n      decls: 8,\n      vars: 1,\n      consts: [[1, \"cart-container\", \"container\", \"py-5\"], [1, \"text-center\", \"mb-4\"], [1, \"cart-items\"], [\"class\", \"cart-item d-flex align-items-center justify-content-between mb-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"mt-4\"], [1, \"btn\", \"btn-primary\", \"btn-lg\", \"shadow-sm\"], [1, \"cart-item\", \"d-flex\", \"align-items-center\", \"justify-content-between\", \"mb-3\"], [1, \"product-image\"], [\"src\", \"https://i.pinimg.com/originals/2f/f7/7d/2ff77d149b32f6ac6b6664f9181ca803.png\", \"alt\", \"\\u00DCr\\u00FCn Foto\\u011Fraf\\u0131\"], [1, \"product-details\", \"flex-grow-1\", \"px-3\"], [1, \"product-name\", \"mb-1\"], [1, \"product-quantity\", \"text-muted\"], [1, \"product-price\"], [1, \"text-success\", \"fw-bold\"]],\n      template: function CardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2, \"Sepetiniz\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2);\n          i0.ɵɵtemplate(4, CardComponent_div_4_Template, 11, 3, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n          i0.ɵɵtext(7, \"Sipari\\u015F Ver\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.productNames);\n        }\n      },\n      dependencies: [i2.NgForOf],\n      styles: [\".cart-container[_ngcontent-%COMP%]{background-color:#f9f9f9;border-radius:8px;padding:20px;box-shadow:0 4px 10px #0000001a}.cart-items[_ngcontent-%COMP%]{max-height:500px;overflow-y:auto}.cart-item[_ngcontent-%COMP%]{background-color:#fff;border:1px solid #ddd;border-radius:8px;padding:10px 15px;transition:transform .3s ease,box-shadow .3s ease}.cart-item[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 4px 12px #00000026}.product-image[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100px;height:100px;object-fit:cover;border-radius:5px}.product-details[_ngcontent-%COMP%]{flex-grow:1}.product-name[_ngcontent-%COMP%]{font-weight:700;font-size:16px;color:#333}.product-quantity[_ngcontent-%COMP%]{font-size:14px;color:#777}.product-price[_ngcontent-%COMP%]{font-size:18px;font-weight:700;color:#28a745}button.btn-primary[_ngcontent-%COMP%]{padding:12px 30px;font-size:18px;border-radius:50px;transition:background-color .3s ease,box-shadow .3s ease}button.btn-primary[_ngcontent-%COMP%]:hover{background-color:#0056b3;box-shadow:0 4px 12px #0003}\"]\n    });\n  }\n  return CardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}