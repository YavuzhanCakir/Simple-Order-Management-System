{"ast":null,"code":"import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ColorService } from '../color/services/color.service';\nimport { Color } from '../color/models/color';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { ColorFormDialogComponent } from '../color/color-form-dialog/color-form-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../color/services/color.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/list\";\nfunction ColorDialogComponent_mat_list_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-list-item\")(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 4);\n    i0.ɵɵelementStart(4, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ColorDialogComponent_mat_list_item_4_Template_button_click_4_listener() {\n      const color_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.editColor(color_r2));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ColorDialogComponent_mat_list_item_4_Template_button_click_7_listener() {\n      const color_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteColor(color_r2.id));\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const color_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(color_r2.name);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"background-color\", color_r2.code);\n  }\n}\nfunction ColorDialogComponent_form_5_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ColorDialogComponent_form_5_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Code is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ColorDialogComponent_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 7)(1, \"mat-form-field\", 8);\n    i0.ɵɵelement(2, \"input\", 9);\n    i0.ɵɵtemplate(3, ColorDialogComponent_form_5_div_3_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-form-field\", 8);\n    i0.ɵɵelement(5, \"input\", 11);\n    i0.ɵɵtemplate(6, ColorDialogComponent_form_5_div_6_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ColorDialogComponent_form_5_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.save());\n    });\n    i0.ɵɵtext(8, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r2.colorAddForm);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.colorAddForm.get(\"name\").hasError(\"required\") && ctx_r2.colorAddForm.get(\"name\").dirty);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.colorAddForm.get(\"code\").hasError(\"required\") && ctx_r2.colorAddForm.get(\"code\").dirty);\n  }\n}\nexport let ColorDialogComponent = /*#__PURE__*/(() => {\n  class ColorDialogComponent {\n    constructor(fb, colorService, dialogRef, data) {\n      this.fb = fb;\n      this.colorService = colorService;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.colors = [];\n      this.color = new Color();\n    }\n    ngOnInit() {\n      this.loadColors();\n      this.colorAddForm = this.fb.group({\n        name: ['', Validators.required],\n        code: ['', Validators.required]\n      });\n    }\n    loadColors() {\n      this.colorService.getColorList().subscribe(data => {\n        this.colors = data;\n      }, error => {\n        console.error('Error fetching colors', error);\n      });\n    }\n    save() {\n      if (this.colorAddForm.valid) {\n        this.dialogRef.close(this.colorAddForm.value);\n      }\n    }\n    deleteColor(colorId) {\n      this.colorService.deleteColor(colorId).subscribe(data => {\n        this.alertifyService.success(data.toString());\n        this.colorList = this.colorList.filter(x => x.id != colorId);\n        this.dataSource = new MatTableDataSource(this.colorList);\n        this.configDataTable();\n      });\n    }\n    updateColor() {\n      this.colorService.updateColor(this.color).subscribe(data => {\n        var index = this.colorList.findIndex(x => x.id == this.color.id);\n        this.colorList[index] = this.color;\n        this.dataSource = new MatTableDataSource(this.colorList);\n        this.configDataTable();\n        this.color = new Color();\n        this.dialogRef.close();\n        this.alertifyService.success(data);\n        this.clearFormGroup(this.colorAddForm);\n      });\n    }\n    configDataTable() {\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n    }\n    clearFormGroup(group) {\n      group.markAsUntouched();\n      group.reset();\n      Object.keys(group.controls).forEach(key => {\n        group.get(key).setErrors(null);\n        if (key == 'id') group.get(key).setValue(0);\n      });\n    }\n    openCarEditDialog(car) {\n      const dialogRef = this.dialog.open(ColorFormDialogComponent, {\n        width: '500px',\n        data: {\n          carData: car\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          // this.getCarList()\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ColorDialogComponent_Factory(t) {\n      return new (t || ColorDialogComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ColorService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ColorDialogComponent,\n      selectors: [[\"app-color-dialog\"]],\n      viewQuery: function ColorDialogComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatPaginator, 5);\n          i0.ɵɵviewQuery(MatSort, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n        }\n      },\n      decls: 9,\n      vars: 2,\n      consts: [[\"mat-dialog-title\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroup\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"mat-dialog-close\", \"\", \"color\", \"warn\"], [1, \"example-color-box\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\"], [3, \"formGroup\"], [1, \"example-full-width\"], [\"matInput\", \"\", \"placeholder\", \"Name\", \"type\", \"text\", \"formControlName\", \"name\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Code\", \"type\", \"text\", \"formControlName\", \"code\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"alert\", \"alert-danger\"]],\n      template: function ColorDialogComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\", 0);\n          i0.ɵɵtext(1, \"Manage Colors\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"mat-list\");\n          i0.ɵɵtemplate(4, ColorDialogComponent_mat_list_item_4_Template, 10, 3, \"mat-list-item\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, ColorDialogComponent_form_5_Template, 9, 3, \"form\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"mat-dialog-actions\")(7, \"button\", 3);\n          i0.ɵɵtext(8, \"Close\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.colors);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.colorAddForm);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.MatDialogClose, i3.MatDialogTitle, i3.MatDialogActions, i3.MatDialogContent, i5.MatButton, i5.MatIconButton, i6.MatIcon, i7.MatFormField, i8.MatInput, i9.MatList, i9.MatListItem]\n    });\n  }\n  return ColorDialogComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}