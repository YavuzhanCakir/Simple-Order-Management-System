{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar _a;\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ColorService } from '../color/services/color.service';\nimport { UpdateColorDialogComponent } from './update-color-dialog/update-color-dialog.component';\nlet ColorDialogComponent = class ColorDialogComponent {\n  constructor(dialog, dialogRef, data, colorService, fb) {\n    this.dialog = dialog;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.colorService = colorService;\n    this.fb = fb;\n    this.colors = []; // Mevcut renkler\n    this.colorForm = this.fb.group({\n      name: ['', Validators.required],\n      // Color adı zorunlu\n      code: [null, [Validators.required, Validators.pattern(/^[0-9]+$/)]] // Color kodu zorunlu, sadece sayı\n    });\n  }\n  ngOnInit() {\n    this.getColors(); // Mevcut renkleri yükle\n  }\n  getColors() {\n    this.colorService.getColorList().subscribe(data => {\n      this.colors = data.filter(color => !color.isDeleted); // Sadece silinmemiş renkleri getir\n    });\n  }\n  addColor() {\n    if (this.colorForm.valid) {\n      const newColor = this.colorForm.value;\n      this.colorService.addColor(newColor).subscribe(() => {\n        this.getColors(); // Listeyi güncelle\n        this.colorForm.reset(); // Formu sıfırla\n      });\n    }\n  }\n  updateColor(color) {\n    const dialogRef = this.dialog.open(UpdateColorDialogComponent, {\n      width: '400px',\n      data: {\n        color\n      } // Seçilen renk bilgileri gönderiliyor\n    });\n    dialogRef.afterClosed().subscribe(updatedColor => {\n      if (updatedColor) {\n        this.colorService.updateColor(updatedColor).subscribe(() => {\n          this.getColors(); // Listeyi güncelle\n        });\n      }\n    });\n  }\n  deleteColor(id) {\n    this.colorService.deleteColor(id).subscribe(() => {\n      this.getColors(); // Listeyi güncelle\n    });\n  }\n  closeDialog() {\n    this.dialogRef.close();\n  }\n};\nColorDialogComponent = __decorate([Component({\n  selector: 'app-color-dialog',\n  templateUrl: './color-dialog.component.html',\n  styleUrls: ['./color-dialog.component.css']\n}), __param(2, Inject(MAT_DIALOG_DATA)), __metadata(\"design:paramtypes\", [typeof (_a = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _a : Object, MatDialogRef, Object, ColorService, FormBuilder])], ColorDialogComponent);\nexport { ColorDialogComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}