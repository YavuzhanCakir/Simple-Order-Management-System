{"ast":null,"code":"import { ProductService } from '../product/services/product.service';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../product/services/product.service\";\nimport * as i2 from \"@angular/common\";\nfunction CardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"p\", 6);\n    i0.ɵɵtext(2, \"Sepetinizde \\u00FCr\\u00FCn bulunmamaktad\\u0131r.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CardComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵelement(2, \"img\", 9);\n    i0.ɵɵelementStart(3, \"div\", 10)(4, \"h5\", 11);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 12);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const productName_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(productName_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Adet: \", ctx_r2.products[i_r2].quantity, \"\");\n  }\n}\nexport let CardComponent = /*#__PURE__*/(() => {\n  class CardComponent {\n    constructor(productService) {\n      this.productService = productService;\n      this.products = []; // LocalStorage'den alınacak ürünler burada tutulacak\n      this.productNames = [];\n      this.productIds = [];\n      this.cartItems = [{\n        id: 1,\n        name: 'T-shirt',\n        price: 29.99,\n        quantity: 2,\n        image: 'https://example.com/t-shirt.jpg'\n      }, {\n        id: 2,\n        name: 'Jeans',\n        price: 49.99,\n        quantity: 1,\n        image: 'https://example.com/jeans.jpg'\n      }, {\n        id: 3,\n        name: 'Sneakers',\n        price: 79.99,\n        quantity: 1,\n        image: 'https://example.com/sneakers.jpg'\n      }];\n    }\n    ngOnInit() {\n      this.loadProductsFromLocalStorage();\n      this.loadProductIds();\n      this.loadProductNames();\n      console.log('products', this.products);\n      const storedProducts = localStorage.getItem('cart');\n      console.log('Stored Products:', storedProducts);\n      console.log('productIdlerr', this.productIds);\n      console.log('productName', this.productNames);\n    }\n    // LocalStorage'den ürünleri yükle\n    loadProductsFromLocalStorage() {\n      const storedProducts = localStorage.getItem('cart'); // 'cart' anahtarını kullanarak localStorage'den veri alıyoruz\n      if (storedProducts) {\n        this.products = JSON.parse(storedProducts); // Veriyi JSON formatından diziye dönüştürüyoruz\n      }\n      console.log(storedProducts);\n    }\n    loadProductIds() {\n      const storedProducts = localStorage.getItem('cart');\n      if (storedProducts) {\n        const products = JSON.parse(storedProducts);\n        console.log('Tüm Ürünler:', products);\n        // Sadece geçerli (null olmayan) productId'leri filtrele\n        this.productIds = products.filter(item => item.productId !== null && item.productId !== undefined).map(item => item.productId);\n        console.log('Product IDs:', this.productIds);\n        return this.productIds; // ID'lerin listesi\n      }\n      return []; // Eğer veri yoksa boş bir dizi döndür\n    }\n    loadProductNames() {\n      const uniqueProductIds = [...new Set(this.productIds)]; // Aynı ID'leri filtrele\n      const productRequests = uniqueProductIds.map(id => this.productService.getProductById(id));\n      forkJoin(productRequests).subscribe({\n        next: products => {\n          this.productNames = products.map(product => product.name);\n          this.products = uniqueProductIds.map((id, index) => ({\n            id,\n            quantity: this.products.find(p => p.productId === id)?.quantity || 0\n          }));\n          console.log('Product Names:', this.productNames);\n        },\n        error: err => {\n          console.error('Error fetching product names', err);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function CardComponent_Factory(t) {\n      return new (t || CardComponent)(i0.ɵɵdirectiveInject(i1.ProductService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CardComponent,\n      selectors: [[\"app-card\"]],\n      decls: 6,\n      vars: 2,\n      consts: [[1, \"container\", \"my-5\"], [1, \"text-center\", \"mb-4\"], [1, \"row\"], [\"class\", \"col-12 text-center\", 4, \"ngIf\"], [\"class\", \"col-md-6 col-lg-4 mb-4\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-12\", \"text-center\"], [1, \"text-muted\"], [1, \"col-md-6\", \"col-lg-4\", \"mb-4\"], [1, \"card\", \"shadow-sm\"], [\"src\", \"https://via.placeholder.com/300\", \"alt\", \"\\u00DCr\\u00FCn Foto\\u011Fraf\\u0131\", 1, \"card-img-top\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\", \"text-muted\"]],\n      template: function CardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2, \"Sepetiniz\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 2);\n          i0.ɵɵtemplate(4, CardComponent_div_4_Template, 3, 0, \"div\", 3)(5, CardComponent_div_5_Template, 8, 2, \"div\", 4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.products.length === 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.productNames);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf],\n      styles: [\".card[_ngcontent-%COMP%]{border-radius:10px;overflow:hidden;transition:transform .2s,box-shadow .2s}.card[_ngcontent-%COMP%]:hover{transform:scale(1.05);box-shadow:0 4px 15px #0003}.card-img-top[_ngcontent-%COMP%]{height:200px;object-fit:cover}.card-body[_ngcontent-%COMP%]{text-align:center}\"]\n    });\n  }\n  return CardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}