{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { LookUpService } from 'app/core/services/LookUp.service';\nimport { AuthService } from 'app/core/components/admin/login/services/auth.service';\nimport { Depo } from './models/depo';\nimport { DepoService } from './services/depo.service';\nimport { ProductService } from '../product/services/product.service';\nlet DepoComponent = class DepoComponent {\n  constructor(depoService, lookupService, alertifyService, formBuilder, authService, productService) {\n    this.depoService = depoService;\n    this.lookupService = lookupService;\n    this.alertifyService = alertifyService;\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.productService = productService;\n    this.displayedColumns = ['id', 'createdUserId', 'createdDate', 'lastUpdatedUserId', 'lastUpdatedDate', 'status', 'isDeleted', 'productId', 'productName', 'colorId', 'quantity', 'update', 'delete'];\n    this.depo = new Depo();\n    this.products = [];\n    this.depolookUp = [];\n  }\n  ngAfterViewInit() {\n    this.getDepoList();\n  }\n  ngOnInit() {\n    this.createDepoAddForm();\n    this.loadProducts();\n    // Ürün ID seçildiğinde ismi otomatik doldur\n    this.depoAddForm.get('productId')?.valueChanges.subscribe(selectedProductId => {\n      const selectedProduct = this.products.find(product => product.id === selectedProductId);\n      if (selectedProduct) {\n        this.depoAddForm.patchValue({\n          productName: selectedProduct.name\n        });\n      } else {\n        this.depoAddForm.patchValue({\n          productName: ''\n        });\n      }\n    });\n  }\n  getDepoList() {\n    this.depoService.getDepoList().subscribe(data => {\n      this.depoList = data;\n      this.dataSource = new MatTableDataSource(data);\n      this.configDataTable();\n    });\n  }\n  save() {\n    if (this.depoAddForm.valid) {\n      this.depo = Object.assign({}, this.depoAddForm.value);\n      if (this.depo.id == 0) this.addDepo();else this.updateDepo();\n    }\n  }\n  addDepo() {\n    this.depoService.addDepo(this.depo).subscribe(data => {\n      this.getDepoList();\n      this.depo = new Depo();\n      jQuery('#depo').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.depoAddForm);\n    });\n  }\n  updateDepo() {\n    this.depoService.updateDepo(this.depo).subscribe(data => {\n      var index = this.depoList.findIndex(x => x.id == this.depo.id);\n      this.depoList[index] = this.depo;\n      this.dataSource = new MatTableDataSource(this.depoList);\n      this.configDataTable();\n      this.depo = new Depo();\n      jQuery('#depo').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.depoAddForm);\n    });\n  }\n  createDepoAddForm() {\n    this.depoAddForm = this.formBuilder.group({\n      id: [0],\n      createdUserId: this.authService.getCurrentUserId(),\n      lastUpdatedUserId: this.authService.getCurrentUserId(),\n      status: true,\n      isDeleted: false,\n      productId: [0, Validators.required],\n      productName: [\"\", Validators.required],\n      colorId: [0, Validators.required],\n      quantity: [0, Validators.required]\n    });\n  }\n  deleteDepo(depoId) {\n    this.depoService.deleteDepo(depoId).subscribe(data => {\n      this.alertifyService.success(data.toString());\n      this.depoList = this.depoList.filter(x => x.id != depoId);\n      this.dataSource = new MatTableDataSource(this.depoList);\n      this.configDataTable();\n    });\n  }\n  getDepoById(depoId) {\n    this.clearFormGroup(this.depoAddForm);\n    this.depoService.getDepoById(depoId).subscribe(data => {\n      this.depo = data;\n      this.depoAddForm.patchValue(data);\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key).setErrors(null);\n      if (key == 'id') group.get(key).setValue(0);\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  loadProducts() {\n    this.productService.getProductList().subscribe(data => {\n      this.products = data; // Ürünleri saklıyoruz\n      // Selectbox için `depolookUp` formatını hazırlıyoruz\n      this.depolookUp = data.map(product => ({\n        id: product.id,\n        label: product.name // İlgili alanı kullanabilirsiniz\n      }));\n      console.log('Depo Lookup', this.depolookUp);\n    }, error => {\n      console.error('Hata oluştu: ', error);\n    });\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], DepoComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], DepoComponent.prototype, \"sort\", void 0);\nDepoComponent = __decorate([Component({\n  selector: 'app-depo',\n  templateUrl: './depo.component.html',\n  styleUrls: ['./depo.component.scss']\n}), __metadata(\"design:paramtypes\", [DepoService, LookUpService, AlertifyService, FormBuilder, AuthService, ProductService])], DepoComponent);\nexport { DepoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}