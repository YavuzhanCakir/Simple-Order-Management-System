{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ProductService } from '../product/services/product.service';\nimport { forkJoin } from 'rxjs';\nimport { OrderService } from '../order/services/order.service';\nlet CardComponent = class CardComponent {\n  constructor(productService, orderService, authService) {\n    this.productService = productService;\n    this.orderService = orderService;\n    this.authService = authService;\n    this.products = []; // LocalStorage'den alınacak ürünler burada tutulacak\n    this.productNames = [];\n    this.productIds = [];\n  }\n  ngOnInit() {\n    this.loadProductsFromLocalStorage();\n    this.loadProductIds();\n    this.loadProductNames();\n    this.products = this.getUniqueProducts();\n    console.log('products', this.products);\n    const storedProducts = localStorage.getItem('cart');\n    console.log('Stored Products:', storedProducts);\n    console.log('productIdlerr', this.productIds);\n    console.log('productName', this.productNames);\n  }\n  // LocalStorage'den ürünleri yükle\n  loadProductsFromLocalStorage() {\n    const storedProducts = localStorage.getItem('cart');\n    if (storedProducts) {\n      const products = JSON.parse(storedProducts); // JSON'dan diziye dönüştür\n      // Geçersiz (null veya undefined) ürünleri filtrele\n      this.products = products.filter(item => item.productId !== null && item.productId !== undefined);\n      console.log('Filtrelenmiş Ürünler:', this.products);\n    } else {\n      this.products = []; // Eğer veri yoksa boş dizi\n    }\n  }\n  loadProductIds() {\n    const storedProducts = localStorage.getItem('cart');\n    if (storedProducts) {\n      const products = JSON.parse(storedProducts);\n      console.log('Tüm Ürünler:', products);\n      // Sadece geçerli (null olmayan) productId'leri filtrele\n      this.productIds = products.filter(item => item.productId !== null && item.productId !== undefined).map(item => item.productId);\n      console.log('Product IDs:', this.productIds);\n      return this.productIds; // ID'lerin listesi\n    }\n    return []; // Eğer veri yoksa boş bir dizi döndür\n  }\n  loadProductNames() {\n    // Benzersiz ürünlerden productId'leri al\n    const uniqueProductIds = this.products.map(product => product.productId);\n    // Product ID'lerine göre getProductById servisini çağır\n    const productRequests = uniqueProductIds.map(id => this.productService.getProductById(id) // Her benzersiz id için servisi çağırıyoruz\n    );\n    // Tüm istekleri paralel olarak çalıştır\n    forkJoin(productRequests).subscribe(products => {\n      // Gelen ürünlerden name bilgilerini al ve productNames dizisine ekle\n      this.productNames = products.map(product => product.name);\n      console.log('Product Names:', this.productNames);\n    });\n  }\n  getUniqueProducts() {\n    // Öncelikle geçersiz ürünleri filtrele (null veya undefined)\n    const filteredProducts = this.products.filter(item => item.productId !== null && item.productId !== undefined);\n    // Benzersiz ürünleri oluşturmak için bir nesne (map) kullan\n    const uniqueProductMap = new Map();\n    for (const product of filteredProducts) {\n      const existingProduct = uniqueProductMap.get(product.productId);\n      if (existingProduct) {\n        // Aynı productId varsa quantity'yi artır\n        existingProduct.quantity += product.quantity;\n      } else {\n        // Yeni ürünse map'e ekle\n        uniqueProductMap.set(product.productId, {\n          ...product\n        });\n      }\n    }\n    // Map'i diziye dönüştür\n    const uniqueProducts = Array.from(uniqueProductMap.values());\n    console.log('Benzersiz Ürünler:', uniqueProducts);\n    return uniqueProducts;\n  }\n  orderProducts() {\n    // Her ürün için bir order nesnesi oluştur\n    const orders = this.products.map(product => ({\n      productId: product.productId,\n      quantity: product.quantity,\n      status: true,\n      isDeleted: false,\n      createdDate: new Date(),\n      orderStatus: 1,\n      customerId: 1\n    }));\n    // Tüm siparişleri sırayla gönder\n    orders.forEach(order => {\n      this.orderService.addOrder(order).subscribe(response => {\n        console.log('Sipariş başarıyla eklendi:', response);\n      }, error => {\n        console.error('Sipariş eklenirken hata oluştu:', error);\n      });\n    });\n  }\n};\nCardComponent = __decorate([Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css']\n}), __metadata(\"design:paramtypes\", [ProductService, OrderService, Object])], CardComponent);\nexport { CardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}