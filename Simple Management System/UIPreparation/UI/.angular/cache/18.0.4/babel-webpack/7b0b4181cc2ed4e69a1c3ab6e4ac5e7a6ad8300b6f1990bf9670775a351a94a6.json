{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { AuthService } from 'app/core/components/admin/login/services/auth.service';\nimport { LookUpService } from 'app/core/services/LookUp.service';\nimport { Customer } from './models/customer';\nimport { CustomerService } from './services/customer.service';\nlet CustomerComponent = class CustomerComponent {\n  constructor(customerService, lookupService, alertifyService, formBuilder, authService) {\n    this.customerService = customerService;\n    this.lookupService = lookupService;\n    this.alertifyService = alertifyService;\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.displayedColumns = ['id', 'createdUserId', 'createdDate', 'lastUpdatedUserId', 'lastUpdatedDate', 'status', 'isDeleted', 'customerName', 'customerCode', 'address', 'phoneNumber', 'email', 'update', 'delete'];\n    this.customer = new Customer();\n    this.products2 = [{\n      id: 1,\n      name: 'T-Shirt',\n      colorId: 1,\n      size: 'M',\n      createdUserId: 23\n    }, {\n      id: 2,\n      name: 'Pantolon',\n      colorId: 2,\n      size: 'L',\n      createdUserId: 1\n    }, {\n      id: 3,\n      name: 'Kazak',\n      colorId: 3,\n      size: 'S',\n      createdUserId: 45\n    }];\n  }\n  ngAfterViewInit() {\n    this.getCustomerList();\n  }\n  ngOnInit() {\n    this.createCustomerAddForm();\n  }\n  getCustomerList() {\n    this.customerService.getCustomerList().subscribe(data => {\n      this.customerList = data;\n      this.dataSource = new MatTableDataSource(data);\n      this.configDataTable();\n    });\n  }\n  save() {\n    if (this.customerAddForm.valid) {\n      this.customer = Object.assign({}, this.customerAddForm.value);\n      this.addCustomer();\n    }\n  }\n  addCustomer() {\n    this.customerService.addCustomer(this.customer).subscribe(data => {\n      this.getCustomerList();\n      this.customer = new Customer();\n      jQuery('#customer').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.customerAddForm);\n    });\n  }\n  updateCustomer() {\n    this.customerService.updateCustomer(this.customer).subscribe(data => {\n      var index = this.customerList.findIndex(x => x.id == this.customer.id);\n      this.customerList[index] = this.customer;\n      this.dataSource = new MatTableDataSource(this.customerList);\n      this.configDataTable();\n      this.customer = new Customer();\n      jQuery('#customer').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.customerAddForm);\n    });\n  }\n  createCustomerAddForm() {\n    this.customerAddForm = this.formBuilder.group({\n      createdUserId: this.authService.getCurrentUserId(),\n      status: [true, Validators.required],\n      customerName: [\"\", Validators.required],\n      customerCode: [\"\", Validators.required],\n      address: [\"\", Validators.required],\n      phoneNumber: [\"\", Validators.required],\n      email: [\"\", Validators.required]\n    });\n  }\n  deleteCustomer(customerId) {\n    this.customerService.deleteCustomer(customerId).subscribe(data => {\n      this.alertifyService.success(data.toString());\n      this.customerList = this.customerList.filter(x => x.id != customerId);\n      this.dataSource = new MatTableDataSource(this.customerList);\n      this.configDataTable();\n    });\n  }\n  getCustomerById(customerId) {\n    this.clearFormGroup(this.customerAddForm);\n    this.customerService.getCustomerById(customerId).subscribe(data => {\n      this.customer = data;\n      this.customerAddForm.patchValue(data);\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key).setErrors(null);\n      if (key == 'id') group.get(key).setValue(0);\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], CustomerComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], CustomerComponent.prototype, \"sort\", void 0);\nCustomerComponent = __decorate([Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n}), __metadata(\"design:paramtypes\", [CustomerService, LookUpService, AlertifyService, FormBuilder, AuthService])], CustomerComponent);\nexport { CustomerComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}