{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\nimport { Component } from '@angular/core';\nimport { ProductService } from './product.service'; // Ürün servisini import ediyoruz\nlet ProductComponent = class ProductComponent {\n  constructor(productService) {\n    this.productService = productService;\n    this.products = []; // Tüm ürünler\n    this.filteredProducts = []; // Filtrelenmiş ürünler\n    this.searchText = ''; // Arama terimi\n  }\n  ngOnInit() {\n    this.productService.getProductList().subscribe(data => {\n      this.products = data;\n      this.filteredProducts = data; // İlk başta tüm ürünler gösterilsin\n    });\n  }\n  onSearchChange() {\n    this.filteredProducts = this.products.filter(product => product.name.toLowerCase().includes(this.searchText.toLowerCase()) || product.size && product.size.toLowerCase().includes(this.searchText.toLowerCase()) || product.colorId && product.colorId.toString().includes(this.searchText));\n  }\n};\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof ProductService !== \"undefined\" && ProductService) === \"function\" ? _a : Object])], ProductComponent);\nexport { ProductComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}