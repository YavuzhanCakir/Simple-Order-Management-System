{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AlertifyService } from 'app/core/services/alertify.service';\nimport { LookUpService } from 'app/core/services/LookUp.service';\nimport { AuthService } from 'app/core/components/admin/login/services/auth.service';\nimport { Order } from './models/order';\nimport { OrderService } from './services/order.service';\nimport { CustomerService } from '../customer/services/customer.service';\nimport { ProductService } from '../product/services/product.service';\nimport { DepoService } from '../depo/services/depo.service';\nexport var StatusEnum = /*#__PURE__*/function (StatusEnum) {\n  StatusEnum[\"Approved\"] = \"Approved\";\n  StatusEnum[\"Pending\"] = \"Pending\";\n  StatusEnum[\"Cancelled\"] = \"Cancelled\";\n  StatusEnum[\"Rejected\"] = \"Rejected\";\n  return StatusEnum;\n}(StatusEnum || {});\nexport const OrderStatusList = [{\n  id: 0,\n  label: 'Approved'\n}, {\n  id: 1,\n  label: 'Pending'\n}, {\n  id: 2,\n  label: 'Cancelled'\n}, {\n  id: 3,\n  label: 'Rejected'\n}];\nlet OrderComponent = class OrderComponent {\n  constructor(orderService, lookupService, alertifyService, formBuilder, authService, customerService, productService, depoService) {\n    this.orderService = orderService;\n    this.lookupService = lookupService;\n    this.alertifyService = alertifyService;\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.customerService = customerService;\n    this.productService = productService;\n    this.depoService = depoService;\n    this.displayedColumns = ['createdUserId', 'createdDate', 'lastUpdatedUserId', 'lastUpdatedDate', 'status', 'customerId', 'productId', 'quantity', 'update', 'delete'];\n    this.order = new Order();\n    this.customers = [];\n    this.products = [];\n    this.depos = [];\n    this.orderStatusList = OrderStatusList;\n    this.quantityOptions = [];\n    this.colorMapping = {\n      8: 'Kırmızı',\n      9: 'Mavi',\n      13: 'Siyah',\n      14: 'Beyaz'\n    };\n  }\n  ngAfterViewInit() {\n    this.getOrderList();\n  }\n  ngOnInit() {\n    this.createOrderAddForm();\n    this.getCustomers();\n    this.getProducts();\n    this.getDepos();\n    this.onProductChange();\n    console.log('quantityOptions', this.quantityOptions);\n    console.log('Data Sorsss', this.dataSource);\n    this.orderAddForm.get('productId').valueChanges.subscribe(value => {\n      console.log('Product ID value changed:', value);\n      this.onProductChange();\n    });\n  }\n  getOrderList() {\n    this.orderService.getOrderList().subscribe(data => {\n      // isDeleted değeri 1 olmayanları filtreliyoruz\n      const filteredData = data.filter(item => item.isDeleted !== true);\n      this.orderList = filteredData;\n      this.dataSource = new MatTableDataSource(filteredData);\n      this.configDataTable();\n    });\n  }\n  save() {\n    if (this.orderAddForm.valid) {\n      this.order = Object.assign({}, this.orderAddForm.value);\n      if (this.order.id == 0) this.addOrder();else this.updateOrder();\n    }\n  }\n  addOrder() {\n    this.orderService.addOrder(this.order).subscribe(data => {\n      this.getOrderList();\n      this.order = new Order();\n      jQuery('#order').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.orderAddForm);\n    });\n  }\n  updateOrder() {\n    this.orderService.updateOrder(this.order).subscribe(data => {\n      var index = this.orderList.findIndex(x => x.id == this.order.id);\n      this.orderList[index] = this.order;\n      this.dataSource = new MatTableDataSource(this.orderList);\n      this.configDataTable();\n      this.order = new Order();\n      jQuery('#order').modal('hide');\n      this.alertifyService.success(data);\n      this.clearFormGroup(this.orderAddForm);\n    });\n  }\n  createOrderAddForm() {\n    this.orderAddForm = this.formBuilder.group({\n      id: [0],\n      createdUserId: this.authService.getCurrentUserId(),\n      lastUpdatedUserId: this.authService.getCurrentUserId(),\n      orderStatus: [null],\n      isDeleted: [false],\n      customerId: [0, Validators.required],\n      productId: [0, Validators.required],\n      quantity: [0, Validators.required],\n      status: [true]\n    });\n  }\n  deleteOrder(orderId) {\n    this.orderService.deleteOrder(orderId).subscribe(data => {\n      this.alertifyService.success(data.toString());\n      this.orderList = this.orderList.filter(x => x.id != orderId);\n      this.dataSource = new MatTableDataSource(this.orderList);\n      this.configDataTable();\n    });\n  }\n  getOrderById(orderId) {\n    this.clearFormGroup(this.orderAddForm);\n    this.orderService.getOrderById(orderId).subscribe(data => {\n      this.order = data;\n      this.orderAddForm.patchValue(data);\n    });\n  }\n  clearFormGroup(group) {\n    group.markAsUntouched();\n    group.reset();\n    Object.keys(group.controls).forEach(key => {\n      group.get(key).setErrors(null);\n      if (key == 'id') group.get(key).setValue(0);\n    });\n  }\n  checkClaim(claim) {\n    return this.authService.claimGuard(claim);\n  }\n  configDataTable() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  getCustomers() {\n    this.customerService.getCustomerList().subscribe(data => {\n      console.log('api yanıtı', data);\n      this.customers = data; // Verileri kaydet\n    }, error => {\n      console.error('Müşteri listesi alınırken bir hata oluştu:', error);\n    });\n  }\n  getProducts() {\n    this.productService.getProductList().subscribe(data => {\n      console.log('product Yanıtı', data);\n      this.products = data;\n    }, error => {\n      console.error('Customer hata', error);\n    });\n  }\n  getDepos() {\n    this.depoService.getDepoList().subscribe(data => {\n      console.log('depo yanıtı', data);\n      this.depos = data;\n    }, error => {\n      console.error('depo hata', error);\n    });\n  }\n  // Formdaki productId değişimi üzerine quantity seçeneklerini güncelle\n  onProductChange() {\n    const productId = Number(this.orderAddForm.get('productId').value);\n    console.log('Selected Product ID:', productId); // Değeri kontrol et\n    if (productId) {\n      const selectedDepo = this.depos.find(depo => {\n        console.log('Checking Depo productId:', depo.productId); // Depoların productId'lerini kontrol et\n        return depo.productId === productId;\n      });\n      console.log('Selected Depo:', selectedDepo); // Depo kontrolü\n      if (selectedDepo) {\n        this.updateQuantityOptions(selectedDepo.quantity);\n      } else {\n        console.log('No matching depo found for productId:', productId);\n      }\n    }\n  }\n  // Depo stoğuna göre quantity seçeneklerini güncelle\n  updateQuantityOptions(stockQuantity) {\n    console.log('Stock Quantity:', stockQuantity); // Depo stoğunu kontrol et\n    this.quantityOptions = []; // Önce eski seçenekleri temizle\n    for (let i = 1; i <= stockQuantity; i++) {\n      this.quantityOptions.push(i);\n    }\n    console.log('Quantity Options:', this.quantityOptions); // Yeni quantity seçeneklerini kontrol et\n  }\n  getColorName(colorId) {\n    return this.colorMapping[colorId] || 'Bilinmiyor'; // Eğer colorId yoksa 'Bilinmiyor' döner.\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], OrderComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], OrderComponent.prototype, \"sort\", void 0);\nOrderComponent = __decorate([Component({\n  selector: 'app-order',\n  templateUrl: './order.component.html',\n  styleUrls: ['./order.component.scss']\n}), __metadata(\"design:paramtypes\", [OrderService, LookUpService, AlertifyService, FormBuilder, AuthService, CustomerService, ProductService, DepoService])], OrderComponent);\nexport { OrderComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}